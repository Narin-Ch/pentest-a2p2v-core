#!/usr/bin/env python3
#
#  Copyright (C) 2018-2021 Toshiba Corporation and Perspecta Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.


import xml.etree.ElementTree as ET
import sqlite3

import appdirs
import logging
import os

# appname and appauthor are used for determining configuration directory
appname = 'a2p2v'
appauthor = 'PerspectaLabs'

# The name of the database file
DATABASE_FILENAME = 'a2p2v.db'

logger = logging.getLogger(__name__)

def get_config_dir():
    '''Get the name of the configuration directory
    On Linux, this is $HOME/.config/a2p2v
    Returns:
        str: name of the configuration directory
    '''
    return appdirs.user_config_dir(appname, appauthor)

def get_database_filename():
    '''Get the full path and name of the configuration file
    On Linux, this is $HOME/.config/a2p2v/a2p2v.db
    Returns:
        str: full path and name of the database file
    '''
    config_dir = get_config_dir()
    filename = os.path.join(config_dir, DATABASE_FILENAME)
    return filename

def import_db_from_file(filename):
    tree = ET.parse(filename)
    root = tree.getroot()

    db_filename = get_database_filename() 

    # Check if the db already exists
    if os.path.isfile(db_filename):
        user_response = input('Warning: database file already exists! Remove and reload (n/Y)?: ').strip()
        if user_response != 'y' and user_response != 'Y' and user_response != '':
            return
        else:
            os.remove(db_filename)
            logger.debug('{} removed.'.format(db_filename))
        
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    
    # Create database tables
    cursor.execute("CREATE TABLE capability (capability_id VARCHAR(128) NOT NULL, title TEXT, class VARCHAR(12) NOT NULL, subclass VARCHAR(128), severity TINYINT, cvss VARCHAR(128), rank TINYINT, solution TEXT, cves TEXT, CONSTRAINT pk_capability PRIMARY KEY(capability_id));")
    #cursor.execute("CREATE TABLE capability (capability_id VARCHAR(128) NOT NULL, title TEXT, class VARCHAR(12) NOT NULL, subclass VARCHAR(128), severity TINYINT, cvss VARCHAR(128), rank VARCHAR(15), solution TEXT, cves TEXT, CONSTRAINT pk_capability PRIMARY KEY(capability_id));")
    
    cursor.execute("CREATE TABLE pap (capability_id VARCHAR(128) NOT NULL, pap_class VARCHAR(15) NOT NULL, pap_host VARCHAR(128), pap_type VARCHAR(255) NOT NULL, pap_key VARCHAR(255) NOT NULL, pap_value TEXT NOT NULL, CONSTRAINT capabilitypap FOREIGN KEY(capability_id) REFERENCES capability(capability_id) ON UPDATE NO ACTION ON DELETE NO ACTION, CONSTRAINT pk_pap PRIMARY KEY(capability_id, pap_class, pap_host, pap_type, pap_key, pap_value));")
    
    # Parse file
    for icapability in root.findall('capability'):
        capabilityID = icapability.attrib['id']
        # If this is a derived capability, inherit class, subclass, severity, rank and solution from parent capability
        if '.' in capabilityID:
            parentCapabilityID = capabilityID.split('.')[0]
            cursor.execute("SELECT class, subclass, severity, cvss, rank, solution FROM capability WHERE capability_id == '{}';".format(parentCapabilityID))
            rows = cursor.fetchall()
            if rows:
                result = rows[0]
                (parentCapabilityClass, parentCapabilitySubClass, parentCapabilitySeverity, parentCapabilityCVSS, parentCapabilityRank, parentCapabilitySolution) = result
            else:
                logger.error("Parent {} for derived capability {} not found.".format(parentCapabilityID, capabilityID)) 

        if 'title' in icapability.attrib:
            capabilityTitle = icapability.attrib['title']
        else:
            capabilityTitle = capabilityID

        if 'class' in icapability.attrib:
            capabilityClass = icapability.attrib['class'].lower()
        elif '.' in capabilityID:
            capabilityClass = parentCapabilityClass
        else:
            logger.warning("Capability {} does not specify class.  Assuming service".format(capabilityID))
            capabilityClass = 'service'

        if 'subclass' in icapability.attrib:
            capabilitySubClass = icapability.attrib['subclass'].lower()
        else:
            capabilitySubClass = capabilityID
         
        if 'severity' in icapability.attrib:
            capabilitySeverity = icapability.attrib['severity']
        elif '.' in capabilityID:
            capabilitySeverity = parentCapabilitySeverity
        else:
            logger.warning("Capability {} does not specify severity.  Assuming 0".format(capabilityID))
            capabilitySeverity = 0
         
        if 'cvss' in icapability.attrib:
            capabilityCVSS = icapability.attrib['cvss']
        elif '.' in capabilityID:
            capabilityCVSS = parentCapabilityCVSS
        else:
            logger.warning("Capability {} does not specify cvss.  Leaving blank".format(capabilityID))
            capabilityCVSS = ""

        if 'rank' in icapability.attrib:
            capabilityRank = icapability.attrib['rank']
        elif '.' in capabilityID:
            capabilityRank = parentCapabilityRank
        else:
            logger.warning("Capability {} does not specify rank.  Assuming 'normal'".format(capabilityID))
            capabilityRank = 7      # Normal
         
        if 'solution' in icapability.attrib:
            capabilitySolution = icapability.attrib['solution']
        elif '.' in capabilityID:
            capabilitySolution = parentCapabilitySolution
        else:
            logger.warning("Capability {} does not specify solution.  Assuming ''".format(capabilityID))
            capabilitySolution = ""
    
        if 'cve' in icapability.attrib:
            capabilityCVE = icapability.attrib['cve'].lower()
        else:
            capabilityCVE = ""
    
        capabilityInsert = "INSERT INTO capability VALUES('{}', '{}', '{}', '{}', {}, '{}', '{}', '{}', '{}');".format(capabilityID, capabilityTitle, capabilityClass, capabilitySubClass, capabilitySeverity, capabilityCVSS, capabilityRank, capabilitySolution, capabilityCVE)
        logger.debug(capabilityInsert)
        cursor.execute(capabilityInsert)
        conn.commit()
    
        try:
            preconditions = icapability.findall('preconditions/condition')
            for precondition in preconditions:
                pcHost = precondition.attrib['host']
                pcType = precondition.attrib['type']
                pcKey = precondition.attrib['key']
                pcValue = precondition.attrib['value']
    
                preconditionInsert = "INSERT INTO pap VALUES('{}', 'precondition', '{}', '{}', '{}', '{}');".format(capabilityID, pcHost, pcType, pcKey, pcValue)
                logger.debug(preconditionInsert)
                cursor.execute(preconditionInsert)
                conn.commit()
        except:
            pass
    
        try:
            actions = icapability.findall('actions/action')
            for action in actions:
                acType = action.attrib['type']
                acKey = action.attrib['key']
                acValue = action.attrib['value']
        
                actionInsert = "INSERT INTO pap VALUES('{}', 'action', '', '{}', '{}', '{}');".format(capabilityID, acType, acKey, acValue)
                logger.debug(actionInsert)
                cursor.execute(actionInsert)
                conn.commit()
        except:
            pass
    
        try:
            postconditions = icapability.findall('postconditions/condition')
            for postcondition in postconditions:
                pcType = postcondition.attrib['type']
                pcKey = postcondition.attrib['key']
                pcValue = postcondition.attrib['value']
    
                postconditionInsert = "INSERT INTO pap VALUES('{}', 'postcondition', '', '{}', '{}', '{}');".format(capabilityID, pcType, pcKey, pcValue)
                logger.debug(postconditionInsert)
                cursor.execute(postconditionInsert)
                conn.commit()
        except:
            pass
    
    conn.close()
