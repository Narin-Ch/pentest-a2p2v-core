#!/usr/bin/python3.7
#
#  Copyright (C) 2018-2021 Toshiba Corporation and Perspecta Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.


import logging
import matplotlib as mpl
import matplotlib.pyplot as plt
import networkx as nx

logger = logging.getLogger(__name__)

class Visualizer(object):
    def __init__(self):
        mpl.rcParams['toolbar'] = 'None'
    
    def initialize_visuals(self):
        plt.ion
        self.exec_graph = nx.Graph()
        self.exec_graph.add_node('ATTACKER')
        self.previous_node = 'ATTACKER'
        self.edge_labels = {}
        self.o_nodes = {"nodes": ['ATTACKER'], "sizes": [500], "colors": ['#33cc33']}
        self.v_nodes = {"nodes": [], "sizes": [], "colors": []}

        self.fig = plt.figure(figsize=(15,15))

    def cleanup(self):
        self.fig.clear()
        plt.close(self.fig)
        plt.ioff

    def show_network_vis(self, hostsDB, networkGraph):
        self.hostsDB = hostsDB
        self.networkGraph = networkGraph
        logger.info("Rendering Network Graph...")
        (nodeColors, nodeSizes) = self.annotate_graph()
        self.draw_graph(self.networkGraph, "Network Diagram Visualization", nodeColors, nodeSizes, '#ffdea2', 1.0, draw_edge_labels=False)

    def graph_advance(self, node=None, status=None, command=None):
        logger.debug("Graph Advance Called.  Node={}, Status={}, Command={}".format(node, status, command))
        plt.clf()
        if node and not self.exec_graph.has_node(node):
            self.exec_graph.add_node(node)
            self.exec_graph.add_edge(self.previous_node, node, label=command)
            self.previous_node = node
            self.o_nodes["colors"].append('#66ccff')
            self.o_nodes["sizes"].append(500)
            self.o_nodes["nodes"].append(node)
        if status:
            if status == 1: # Some initial access gained
                self.o_nodes["colors"].pop()
                self.o_nodes["colors"].append('#ffff00')
            if status == 2: # Meterpreter session opened
                node = self.o_nodes['nodes'].pop()
                color = self.o_nodes['colors'].pop()
                size = self.o_nodes['sizes'].pop()
                self.v_nodes["nodes"].append(node)
                self.v_nodes["colors"].append('#ffbf00')
                self.v_nodes["sizes"].append(2000)
            #if status == 10: # Successful result on node
            #    self.o_nodes["colors"].append('#ff0000')
        if command:
            edgeKey = (self.previous_node, node)
            if edgeKey in self.edge_labels.keys():
                self.edge_labels[edgeKey] += "\n{}".format(command)
            else:
                self.edge_labels[edgeKey] = command

        pos = nx.circular_layout(self.exec_graph)

        nx.draw_networkx_nodes(self.exec_graph, pos, nodelist=self.o_nodes["nodes"],node_shape='o',node_color=self.o_nodes["colors"],node_size=self.o_nodes["sizes"])
        nx.draw_networkx_nodes(self.exec_graph, pos, nodelist=self.v_nodes["nodes"],node_shape='*',node_color=self.v_nodes["colors"],node_size=self.v_nodes["sizes"])
        nx.draw_networkx_labels(self.exec_graph, pos, font_size=10)
        nx.draw_networkx_edges(self.exec_graph, pos)

        self.draw_graph1(self.exec_graph, "Execution Progress Visualization")

    def show_attack_trees_vis(self, planner):
        logger.info("Rendering Composite Attack Model...")
        treeList = planner.attack_trees
        if len(treeList) == 0:
            logger.info("No trees to render")
            return

        nodeColors = []
        nodeSizes = []
        edgeWeights = []

        label_mapping = {}
        edgeWeight_mapping = {}

        Graph = nx.Graph()

        startNode = planner.state.initial_host.upper()
        Graph.add_node(startNode)
        nodeColors.append('#33cc33')
        nodeSizes.append(200)

        for tree in treeList:
            previousNode = startNode
            treeHops = tree['hops']
            for hop in treeHops:
                node = hop['node']
                key = "{}:{}".format(previousNode, node)
                try:
                    edgeWeight_mapping[key] += .5
                except:
                    edgeWeight_mapping[key] = 1
                previousNode = node

        for tree in treeList:
            previousNode = startNode
            treeHops = tree['hops']
            for hop in treeHops:
                node = hop['node']
                if not Graph.has_node(node):
                    Graph.add_node(node)
                    capabilities = len(self.hostsDB[node]['capabilities'])
                    label_mapping[node] = "{}\n({})".format(node, capabilities)
                    nodeColors.append('#ff0000')
                    nodeSizes.append(capabilities*500)

                if not Graph.has_edge(previousNode, node):
                    key = "{}:{}".format(previousNode, node)
                    Graph.add_edge(previousNode, node, label=edgeWeight_mapping[key])
                    edgeWeights.append(edgeWeight_mapping[key])
                    logger.debug("Edge Start: {}, Edge End: {}".format(previousNode, node))
                previousNode = node

        newGraph = nx.relabel_nodes(Graph, label_mapping)

        self.draw_graph(newGraph, "Composite Attack Tree Visualization", nodeColors, nodeSizes, '#ff0000', edgeWeights)

    def annotate_graph(self):
        nodeColors = []
        nodeSizes = []
        label_mapping = {}

        for node in self.networkGraph.nodes():
            if node == 'ATTACKER':
                nodeColors.append('#33cc33')
                nodeSizes.append(200)
                label_mapping[node] = node
                continue
            elif node in self.hostsDB.keys():
                nodeColors.append('#ff0000')
                capabilities = len(self.hostsDB[node]['capabilities'])
                nodeSizes.append(capabilities*500)
                label_mapping[node] = "{}\n({})".format(node, capabilities)
            else:
                nodeSizes.append(200)
                nodeColors.append('#66ccff')
                label_mapping[node] = node

        self.networkGraph = nx.relabel_nodes(self.networkGraph, label_mapping)

        return (nodeColors, nodeSizes)

    def draw_graph(self, Graph, title, nodeColors, nodeSizes, edgeColors, edgeWeights, draw_edge_labels=True):
        options = {
            'with_labels': True,
        }

        pos = nx.networkx.kamada_kawai_layout(Graph)
        nx.draw(Graph, edge_color = edgeColors, width = edgeWeights, node_color = nodeColors, node_size = nodeSizes, pos=pos, **options)

        self.draw_graph1(Graph, title, show=True)

    def draw_graph1(self, graph, title, show=False):
        pos = nx.networkx.kamada_kawai_layout(graph)
        edgeLabels = nx.get_edge_attributes(graph, 'label')
        nx.draw_networkx_edge_labels(graph, pos, edge_labels=edgeLabels, font_size=6)

        plt.axis('off')
        ax = plt.gca()
        plt.suptitle(title, fontsize=20)
        ax.collections[0].set_edgecolor("#555555")
        ax.set_xlim([1.2*x for x in ax.get_xlim()])
        ax.set_ylim([1.2*y for y in ax.get_ylim()])
        plt.tight_layout()

        if show:
            plt.show()
        else:
            plt.pause(0.05)
